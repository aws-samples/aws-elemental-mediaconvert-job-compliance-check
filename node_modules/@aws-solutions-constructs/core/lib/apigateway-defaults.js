"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultIntegrationResponses = exports.DefaultSpecRestApiProps = exports.DefaultRegionalRestApiProps = exports.DefaultGlobalRestApiProps = exports.DefaultRegionalLambdaRestApiProps = exports.DefaultGlobalLambdaRestApiProps = void 0;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const api = require("aws-cdk-lib/aws-apigateway");
const utils_1 = require("./utils");
/**
 * Private function to configure an api.RestApiProps
 * @param scope - the construct to which the RestApi should be attached to.
 * @param _endpointType - endpoint type for Api Gateway e.g. Regional, Global, Private
 * @param _logGroup - CW Log group for Api Gateway access logging
 */
function DefaultRestApiProps(_endpointType, _logGroup) {
    return {
        endpointConfiguration: {
            types: _endpointType
        },
        cloudWatchRole: false,
        // Configure API Gateway Access logging
        deployOptions: {
            accessLogDestination: new api.LogGroupLogDestination(_logGroup),
            accessLogFormat: api.AccessLogFormat.jsonWithStandardFields(),
            loggingLevel: api.MethodLoggingLevel.INFO,
            dataTraceEnabled: false,
            tracingEnabled: true
        },
        defaultMethodOptions: {
            authorizationType: api.AuthorizationType.IAM
        }
    };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Provides the default set of properties for Edge/Global Lambda backed RestApi
 * @param scope - the construct to which the RestApi should be attached to.
 * @param _endpointType - endpoint type for Api Gateway e.g. Regional, Global, Private
 * @param _logGroup - CW Log group for Api Gateway access logging
 */
function DefaultGlobalLambdaRestApiProps(_existingLambdaObj, _logGroup) {
    const baseProps = DefaultRestApiProps([api.EndpointType.EDGE], _logGroup);
    const extraProps = {
        handler: _existingLambdaObj,
    };
    return Object.assign(baseProps, extraProps);
}
exports.DefaultGlobalLambdaRestApiProps = DefaultGlobalLambdaRestApiProps;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Provides the default set of properties for Regional Lambda backed RestApi
 * @param scope - the construct to which the RestApi should be attached to.
 * @param _endpointType - endpoint type for Api Gateway e.g. Regional, Global, Private
 * @param _logGroup - CW Log group for Api Gateway access logging
 */
function DefaultRegionalLambdaRestApiProps(_existingLambdaObj, _logGroup) {
    const baseProps = DefaultRestApiProps([api.EndpointType.REGIONAL], _logGroup);
    const extraProps = {
        handler: _existingLambdaObj,
    };
    return Object.assign(baseProps, extraProps);
}
exports.DefaultRegionalLambdaRestApiProps = DefaultRegionalLambdaRestApiProps;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Provides the default set of properties for Edge/Global RestApi
 * @param _logGroup - CW Log group for Api Gateway access logging
 */
function DefaultGlobalRestApiProps(_logGroup) {
    return DefaultRestApiProps([api.EndpointType.EDGE], _logGroup);
}
exports.DefaultGlobalRestApiProps = DefaultGlobalRestApiProps;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Provides the default set of properties for Regional RestApi
 * @param _logGroup - CW Log group for Api Gateway access logging
 */
function DefaultRegionalRestApiProps(_logGroup) {
    return DefaultRestApiProps([api.EndpointType.REGIONAL], _logGroup);
}
exports.DefaultRegionalRestApiProps = DefaultRegionalRestApiProps;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Provides the default set of properties for SpecRestApi
 * @param logGroup - CloudWatch Log Group for Api Gateway Access Logging
 */
function DefaultSpecRestApiProps(scope, logGroup) {
    return {
        cloudWatchRole: false,
        deployOptions: {
            accessLogDestination: new api.LogGroupLogDestination(logGroup),
            accessLogFormat: api.AccessLogFormat.jsonWithStandardFields(),
            loggingLevel: api.MethodLoggingLevel.INFO,
            dataTraceEnabled: false,
            tracingEnabled: true
        },
        restApiName: utils_1.generatePhysicalName("", [scope.node.id], 255),
    };
}
exports.DefaultSpecRestApiProps = DefaultSpecRestApiProps;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * @returns The set of default integration responses for status codes 200 and 500.
 */
function DefaultIntegrationResponses() {
    return [
        {
            statusCode: "200"
        },
        {
            statusCode: "500",
            responseTemplates: {
                "text/html": "Error"
            },
            selectionPattern: "500"
        }
    ];
}
exports.DefaultIntegrationResponses = DefaultIntegrationResponses;
//# sourceMappingURL=data:application/json;base64,