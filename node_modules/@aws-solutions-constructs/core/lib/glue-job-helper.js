"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGlueDatabase = exports.createGlueTable = exports.createGlueJobRole = exports.deployGlueJob = exports.buildGlueJob = exports.SinkStoreType = void 0;
const glue = require("aws-cdk-lib/aws-glue");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const defaults = require("../");
const utils_1 = require("./utils");
/**
 * Enumeration of data store types that could include S3, DynamoDB, DocumentDB, RDS or Redshift. Current
 * construct implementation only supports S3, but potential to add other output types in the future
 */
var SinkStoreType;
(function (SinkStoreType) {
    SinkStoreType["S3"] = "S3";
})(SinkStoreType = exports.SinkStoreType || (exports.SinkStoreType = {}));
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildGlueJob(scope, props) {
    if (!props.existingCfnJob) {
        if (props.glueJobProps) {
            if (props.glueJobProps.glueVersion === '2.0' && props.glueJobProps.maxCapacity) {
                throw Error('Cannot set "MaxCapacity" with GlueVersion 2.0 or higher. Use "NumberOfWorkers" and "WorkerType". ' +
                    'Refer the API documentation https://docs.aws.amazon.com/glue/latest/webapi/API_Job.html for more details');
            }
            if (props.glueJobProps.maxCapacity && (props.glueJobProps.numberOfWorkers || props.glueJobProps.workerType)) {
                throw Error('Cannot set MaxCapacity and "WorkerType" or  "NumberOfWorkers". If using glueVersion 2.0 or beyond, ' +
                    'it is recommended to use "WorkerType" or  "NumberOfWorkers"');
            }
            const deployGlueJobResponse = deployGlueJob(scope, props.glueJobProps, props.database, props.table, props.outputDataStore, props.etlCodeAsset);
            return {
                job: deployGlueJobResponse.job,
                role: deployGlueJobResponse.role,
                bucket: deployGlueJobResponse.bucket,
                loggingBucket: deployGlueJobResponse.loggingBucket
            };
        }
        else {
            throw Error('Either glueJobProps or existingCfnJob is required');
        }
    }
    else {
        return { job: props.existingCfnJob, role: aws_iam_1.Role.fromRoleArn(scope, 'ExistingRole', props.existingCfnJob.role) };
    }
}
exports.buildGlueJob = buildGlueJob;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function deployGlueJob(scope, glueJobProps, database, table, outputDataStore, etlCodeAsset) {
    let glueSecurityConfigName;
    if (glueJobProps.securityConfiguration === undefined) {
        glueSecurityConfigName = 'ETLJobSecurityConfig';
        const glueKMSKey = `arn:${aws_cdk_lib_1.Aws.PARTITION}:kms:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:alias/aws/glue`;
        const securityConfigurationProps = {
            name: glueSecurityConfigName,
            encryptionConfiguration: {
                jobBookmarksEncryption: {
                    jobBookmarksEncryptionMode: 'CSE-KMS',
                    kmsKeyArn: glueKMSKey
                },
                s3Encryptions: [{
                        s3EncryptionMode: 'SSE-S3'
                    }]
            }
        };
        // Before turning off SonarQube for the line, reduce the line to it's minimum
        new glue.CfnSecurityConfiguration(scope, 'GlueSecurityConfig', securityConfigurationProps); // NOSONAR
    }
    else {
        glueSecurityConfigName = glueJobProps.securityConfiguration;
    }
    const glueJobPolicy = new aws_iam_1.Policy(scope, 'LogPolicy', {
        statements: [
            new aws_iam_1.PolicyStatement({
                effect: aws_iam_1.Effect.ALLOW,
                actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
                resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws-glue/*`]
            })
        ]
    });
    const jobRole = glueJobProps.role ?
        aws_iam_1.Role.fromRoleArn(scope, 'JobRole', glueJobProps.role) :
        defaults.createGlueJobRole(scope);
    glueJobPolicy.attachToRole(jobRole);
    let outputLocation;
    if (outputDataStore !== undefined && outputDataStore.datastoreType === SinkStoreType.S3) {
        if (outputDataStore.existingS3OutputBucket !== undefined) {
            outputLocation = { bucket: outputDataStore.existingS3OutputBucket };
        }
        else {
            outputLocation = defaults.buildS3Bucket(scope, { bucketProps: outputDataStore.outputBucketProps });
        }
    }
    else {
        outputLocation = defaults.buildS3Bucket(scope, {});
    }
    outputLocation.bucket.grantReadWrite(jobRole);
    const jobArgumentsList = {
        "--enable-metrics": true,
        "--enable-continuous-cloudwatch-log": true,
        "--database_name": database.ref,
        "--table_name": table.ref,
        ...((outputDataStore === undefined || (outputDataStore && outputDataStore.datastoreType === SinkStoreType.S3)) &&
            { '--output_path': `s3a://${outputLocation.bucket.bucketName}/output/` }),
        ...glueJobProps.defaultArguments
    };
    const newGlueJobProps = utils_1.overrideProps(defaults.DefaultGlueJobProps(jobRole, glueJobProps, glueSecurityConfigName, jobArgumentsList, etlCodeAsset), glueJobProps);
    if (etlCodeAsset) {
        etlCodeAsset.grantRead(jobRole);
    }
    else {
        // create CDK Bucket instance from S3 url and grant read access to Glue Job's service principal
        if (isJobCommandProperty(newGlueJobProps.command)) {
            if (!newGlueJobProps.command.scriptLocation) {
                throw Error('Script location has to be provided as an s3 Url location. Script location cannot be empty');
            }
            const scriptLocation = newGlueJobProps.command.scriptLocation;
            const scriptBucketLocation = aws_s3_1.Bucket.fromBucketArn(scope, 'ScriptLocaiton', getS3ArnfromS3Url(scriptLocation));
            scriptBucketLocation.grantRead(jobRole);
        }
    }
    const glueJob = new glue.CfnJob(scope, 'KinesisETLJob', newGlueJobProps);
    return { job: glueJob, role: jobRole, bucket: outputLocation.bucket, loggingBucket: outputLocation.loggingBucket };
}
exports.deployGlueJob = deployGlueJob;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * This is a helper method to create the Role required for the Glue Job. If a role is already created then this
 * method is not required to be called.
 *
 * @param scope - The AWS Construct under which the role is to be created
 */
function createGlueJobRole(scope) {
    return new aws_iam_1.Role(scope, 'JobRole', {
        assumedBy: new aws_iam_1.ServicePrincipal('glue.amazonaws.com'),
        description: 'Service role that Glue custom ETL jobs will assume for exeuction',
    });
}
exports.createGlueJobRole = createGlueJobRole;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * This method creates an AWS Glue table. The method is called when an existing Glue table is not provided
 */
function createGlueTable(scope, database, tableProps, fieldSchema, sourceType, parameters) {
    return defaults.DefaultGlueTable(scope, tableProps !== undefined ? tableProps :
        defaults.DefaultGlueTableProps(database, fieldSchema, sourceType, parameters));
}
exports.createGlueTable = createGlueTable;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * This method creates an AWS Glue database. The method is only called with an existing Glue database type is not provided.
 * The method uses the user provided props to override the defaul props for the Glue database
 *
 * @param scope
 * @param databaseProps
 */
function createGlueDatabase(scope, databaseProps) {
    const _mergedDBProps = (databaseProps !== undefined) ? utils_1.overrideProps(defaults.DefaultGlueDatabaseProps(), databaseProps) :
        defaults.DefaultGlueDatabaseProps();
    return defaults.DefaultGlueDatabase(scope, _mergedDBProps);
}
exports.createGlueDatabase = createGlueDatabase;
/**
 * A utility method to generate the S3 Arn from an S3 Url.
 *
 * @param s3Url
 */
function getS3ArnfromS3Url(s3Url) {
    if (s3Url && s3Url.startsWith('s3://')) {
        const splitString = s3Url.slice('s3://'.length);
        return `arn:${aws_cdk_lib_1.Aws.PARTITION}:s3:::${splitString}`;
    }
    else {
        throw Error(`Received S3URL as ${s3Url}. The S3 url string does not begin with s3://. This is not a standard S3 url`);
    }
}
/**
 * A utility method to type check CfnJob.JobCommandProperty type. For the construct to work for streaming ETL from Kinesis Data
 * Streams, all three attributes of the JobCommandProperty are required, even though they may be optional for other use cases.
 *
 * @param command
 */
function isJobCommandProperty(command) {
    if (command.name &&
        command.pythonVersion &&
        command.scriptLocation) {
        return true;
    }
    else {
        defaults.printWarning('command not of type JobCommandProperty type');
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,